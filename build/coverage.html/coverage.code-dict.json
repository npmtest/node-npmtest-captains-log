{"/home/travis/build/npmtest/node-npmtest-captains-log/test.js":"/* istanbul instrument in package npmtest_captains_log */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-captains-log/lib.npmtest_captains_log.js":"/* istanbul instrument in package npmtest_captains_log */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_captains_log = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_captains_log = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-captains-log/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-captains-log && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_captains_log */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_captains_log\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_captains_log.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_captains_log.rollup.js'] =\n            local.assetsDict['/assets.npmtest_captains_log.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_captains_log.__dirname + '/lib.npmtest_captains_log.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-captains-log/node_modules/captains-log/index.js":"/**\n * Module dependencies.\n */\n\nvar util = require('util');\nvar _ = require('@sailshq/lodash');\nvar rc = require('rc');\nvar wrap = require('./lib/wrap');\nvar configure = require('./lib/configure');\nvar captains = require('./lib/captains');\n\n\n\n/**\n * Captains Log\n *\n * @param {Object} overrides\n *           , {Object}  custom       : a custom logger to use, i.e. Winston\n *           , {Object}  logLevels    : optional - named log levels, defaults to npm conventions\n *           , {String}  level        : the current log level- e.g. silly, verbose, info, debug, warn, error, or silent\n *           , {Boolean} inspect      : defaults to true-- whether to make the log output more readable (combines all args into one string)\n *           , {Object}  inspectOptions : defaults to {}-- options to pass to the inspect function. One example can be {colors: true, depth:null}\n *                                        printing objects in colors. See: https://nodejs.org/api/util.html#util_util_inspect_object_options\n *\n * @return {Function{}} enhanced (callable) version of logger\n */\n\nmodule.exports = function CaptainsLog(overrides) {\n\n  // <todo>\n  //\n  // smart caching\n  // i.e. if (process._captainslog) return process._captainslog\n  // (but only if the overrides passed in are identical)\n  //\n  // </todo>\n\n  // Apply overrides to the default configuration\n  var options = configure(overrides);\n\n  // If no override was specified, we'll instantiate\n  // our default logger, `captains`.\n  var logger = captains();\n\n  // If a custom logger override was specified,\n  // lets try to use it.\n  if (options.custom) {\n    logger = options.custom;\n\n    // Make sure enough log methods exist to meet our requirements.\n    //\n    // We assume that at least something called\n    // `logger.log` or `logger.debug` exists.\n    if (!_.isObject(logger) || !_.isFunction(logger.log)) {\n      throw new Error(\n        'Unsupported logger override provided as `custom`!\\n' +\n        '(has no `.log()` or `.debug()` method.)\\n'+\n        'Here\\'s what was passed in:\\n'+util.inspect(logger,{depth:null})\n      );\n    }//-•\n\n    // Fill in the gaps for the required log methods with\n    // reasonable guesses if the custom logger is missing any\n    // (only required method is `logger.log` or `logger.debug`)\n    // If no reasonable alternative is possible, don't log\n    var nullLog = function() {};\n\n    logger.debug = logger.debug || nullLog;\n    logger.info = logger.info || nullLog;\n    logger.warn = logger.warn || logger.error || nullLog;\n    logger.error = logger.error || nullLog;\n    logger.crit = logger.crit || logger.error || nullLog;\n    logger.verbose = logger.verbose || nullLog;\n    logger.silly = logger.silly || nullLog;\n    logger.blank = logger.blank || nullLog;\n  }\n\n  // Make logger callable and stuff (wrap it)\n  var callableLogger = wrap(logger, options);\n\n  // Also expose logger on `global` if `globalizeAs` is enabled\n  var GLOBAL = (typeof global !== undefined ? global : typeof window !== undefined ? window : Function);\n  if (options.globalizeAs) { GLOBAL[options.globalizeAs] = callableLogger; }\n\n\n  return callableLogger;\n\n};\n","/home/travis/build/npmtest/node-npmtest-captains-log/node_modules/captains-log/lib/wrap.js":"/**\n * Module dependencies.\n */\n\nvar write = require('./write');\nvar DEFAULT = require('./defaults');\n\n\n/**\n * Return a special version of `logger` which may\n * be called directly as a function (implicitly calls\n * `logger.debug` behind the scenes)\n *\n * @param  {Dictionary} logger [original logger]\n * @return {Function}      [callable Logger]\n * @api private\n */\n\nmodule.exports = function _wrap(logger, options) {\n\n  // Make base logger callable (debug)\n  var _CallableLogger = write(logger.debug, 'debug', options);\n\n  // Mix-in log methods, but run `write`\n  // on their arguments to improve the readability\n  // of log output.\n  DEFAULT.METHODS.forEach(function(logAt) {\n    _CallableLogger[logAt] = write(logger[logAt], logAt, options);\n  });\n\n  return _CallableLogger;\n};\n","/home/travis/build/npmtest/node-npmtest-captains-log/node_modules/captains-log/lib/write.js":"/**\n * Module dependencies.\n */\n\nvar util = require('util');\nvar _ = require('@sailshq/lodash');\n\n\n\n/**\n * Build a log function which combines arguments into a string,\n * enhancing them for readability.  If specified, prefixes will be\n * added.\n *\n * @param  {Function} logFn  [log fn]\n * @param  {String} logAt    [e.g. 'silly' or 'error']\n * @param  {Dictionary} options\n *\n * @return {Function}        [enhanced log fn]\n * @api private\n */\n\nmodule.exports = function(logFn, logAt, options) {\n  return function _writeLogToConsole() {\n\n    // Check `options.level` against logAt\n    // to see whether to write the log.\n    // ( silly = 0 | silent = highest )\n    var lvlMap = options.logLevels;\n    var configuredLvl = options.level;\n    if (lvlMap[logAt] < lvlMap[configuredLvl]) { return; }\n\n\n    var args = Array.prototype.slice.call(arguments);\n\n    /////////////////////////////////////////////////////////////////\n    // For backwards-compatibility:\n    // (options.inspect should always be true going forward)\n    //\n    // Note that prefixes and other options will not work with\n    // `inspect===false`.  New features will also not support\n    // inspect:false.\n    //\n    // If `options.inspect` is disabled, just call the log fn normally\n    if (!options.inspect) {\n      return logFn.apply(logFn, args);\n    }\n    /////////////////////////////////////////////////////////////////\n\n    // For reference on the following impl, see:\n    // https://github.com/defunctzombie/node-util/blob/master/util.js#L22\n\n    // Combine & pre-process the arguments passed into the log fn\n    var pieces = [];\n    _.each(args, function(arg) {\n\n      // JavaScript Error instances\n      // > Note that if the experimental `_dontAccessErrorStacks` option is enabled,\n      // > Error stacks will never accessed.  This is useful for performance tuning,\n      // > as explained in: https://github.com/balderdashy/captains-log/issues/17\n      if (_.isError(arg) && arg.stack && !arg.inspect && !options._dontAccessErrorStacks) {\n        pieces.push(arg.stack);\n      }\n      // Non-strings\n      // (miscellaneous arrays, dictionaries, mysterious objects, etc)\n      else if (!_.isString(arg)) {\n        if (options.inspectOptions) {\n          pieces.push(util.inspect(arg, options.inspectOptions));\n        }\n        else { pieces.push(util.inspect(arg)); }\n        return;\n      }\n      // Strings\n      else {\n        pieces.push(arg);\n      }\n\n    });\n\n    // Compose `str` of all the arguments\n    // (include the appropriate prefix if specified)\n    var prefixStr = (options.prefixes && options.prefixes[logAt]) || '';\n    var str = prefixStr + util.format.apply(util, pieces);\n\n    // Call log fn\n    return logFn.apply(logFn, [str]);\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-captains-log/node_modules/captains-log/lib/defaults.js":"/**\n * Implicit defaults.\n * (OPTIONS and OVERRIDES)\n *\n * @type {Dictionary}\n * @api private\n */\n\nmodule.exports = {\n\n  OPTIONS: {\n\n    level: 'info',\n\n    ////////////////////////////////////////////////////////////\n    // Backwards compatibility:\n    // (should always be true going forward)\n    //\n    // Whether to use additional `inspect` logic\n    // (if false- just do exactly what `console.log` would do)\n    inspect: true,\n    ////////////////////////////////////////////////////////////\n\n    logLevels: {\n\n      silly: 0,\n      verbose: 1,\n      info: 2,\n      blank: 2,\n      debug: 3,\n      warn: 4,\n      error: 5,\n      crit: 6,\n      silent: 7\n    },\n\n    globalizeAs: false,\n\n\n    // If defined, uses a prefixTheme as default\n    prefixTheme: 'traditional',\n\n\n    // Different built-in prefix themes:\n    prefixThemes: {\n      traditional: {\n        silly: 'silly: ',\n        verbose: 'verbose: ',\n        info: 'info: ',\n        blank: '',\n        debug: 'debug: ',\n        warn: 'warn: ',\n        error: 'error: ',\n        crit: 'CRITICAL: '\n      },\n      abbreviated: {\n        silly: '[~] ',\n        verbose: '[v] ',\n        info: '[i] ',\n        blank: '',\n        debug: '[d] ',\n        warn: '[!] ',\n        error: '[!] ',\n        crit: '[CRITICAL] '\n      },\n      moderate: {\n        silly: '[silly] ',\n        verbose: '[verbose] ',\n        info: '    ',\n        blank: '',\n        debug: '[-] ',\n        warn: '[!] ',\n        error: '[err] ',\n        crit: '[CRITICAL] '\n      },\n      aligned: {\n        silly: 'silly   | ',\n        verbose: 'verbose | ',\n        info: 'info    | ',\n        blank: '',\n        debug: 'debug   | ',\n        warn: 'warning | ',\n        error: 'error   | ',\n        crit: 'CRITICAL| '\n      }\n    },\n\n    // The `prefixTheme` option is really just shorthand that allows\n    // for configuring a set of log-level-specific prefix settings.\n    // If specified, the following, lower-level `prefix` option overrides\n    // the themes above:\n    // prefix: '||| '\n\n  },\n\n  OVERRIDES: {\n    rc: 'captainslog',\n    ignoreCLIArgs: false,\n\n    // (only used if prefixes are not explicitly set)\n    colors: {\n      silly: 'rainbow',\n      input: 'black',\n      verbose: 'cyan',\n      prompt: 'grey',\n      info: 'green',\n      blank: 'white',\n      data: 'grey',\n      help: 'cyan',\n      warn: 'yellow',\n      debug: 'blue',\n      error: 'red',\n      crit: 'red'\n    }\n  },\n\n  // Log methods to expose\n  METHODS: ['crit', 'error', 'warn', 'debug', 'info', 'blank', 'verbose', 'silly']\n};\n","/home/travis/build/npmtest/node-npmtest-captains-log/node_modules/captains-log/lib/configure.js":"/**\n * Module dependencies.\n */\n\nvar _ = require('@sailshq/lodash');\nvar rc = require('rc');\nvar chalk = require('chalk');\nvar DEFAULT = require('./defaults');\n\n\n/**\n * By default, look for configuration in:\n *   + `.captainslogrc` files\n *   + `CAPTAINSLOG-*` env variables\n *\n * More on `rc` conventions:\n * https://github.com/dominictarr/rc#standards\n *\n * Special overrides:\n *    + overrides.ignoreCLIArgs\n *      -> ignore --verbose, --silent, and --silly\n *    + overrides.rc\n *      -> custom rc prefix to use\n *         (or `false` to disable rc conf completely)\n *      -> defaults to 'captainslog'\n *\n * @api private\n */\n\nmodule.exports = function(overrides) {\n  // console.log('overrides:',overrides);\n  // console.log('DEFAULT.OVERRIDES:',DEFAULT.OVERRIDES);\n\n  overrides = overrides || {};\n\n  // Overrides passed in programmatically always take precedence.\n  overrides = _.extend({}, DEFAULT.OVERRIDES, overrides, {\n\n    prefixThemes: (function (){\n      if (_.isObject(overrides.prefixThemes)) {\n        return _.cloneDeep(overrides.prefixThemes);\n      }\n      else { return undefined; }\n    })(),\n\n    colors: _.extend({}, DEFAULT.OVERRIDES.colors, overrides.colors),\n\n    logLevels: (function (){\n      if (_.isObject(overrides.logLevels)) {\n        return _.clone(overrides.logLevels);\n      }\n      else { return undefined; }\n    })()\n  });\n  // Strip top-level undefined properties.\n  _.each(_.keys(overrides), function (key) {\n    if (_.isUndefined(overrides[key])) { delete overrides[key]; }\n  });\n\n  // console.log('overrides (after merge):',overrides);\n\n\n  // Then `rc` configuration conventions.\n  // (https://github.com/dominictarr/rc#standards)\n  var rconf;\n  if (overrides.rc === false) {\n    rconf = {};\n  } else {\n    rconf = rc(overrides.rc);\n\n    if (!overrides.ignoreCLIArgs) {\n      rconf.level = rconf.level || // Accept command-line shortcuts:\n        rconf.verbose ? 'verbose' : // --verbose\n        rconf.silent ? 'silent' : // --silent\n        rconf.silly ? 'silly' : // --silly\n        undefined;\n    }\n  }\n  rconf = rconf || {};\n\n  // console.log('\\n* * * rconf:',rconf);\n  // console.log('\\n* * * overrides:',overrides);\n  // Combine overrides and rc config into `options`\n  var options = _.extend(_.clone(rconf), overrides, {\n\n    prefixThemes: (function (){\n      if (_.isUndefined(overrides.prefixThemes)) { return _.cloneDeep(rconf.prefixThemes); }\n      else if (_.isObject(overrides.prefixThemes)) {\n        return _.merge(_.cloneDeep(rconf.prefixThemes||{}), _.cloneDeep(overrides.prefixThemes));\n      }\n      else { return _.cloneDeep(overrides.prefixThemes); }\n    })(),\n\n    colors: (function (){\n      if (_.isUndefined(overrides.colors)) { return _.clone(rconf.colors); }\n      else if (_.isObject(overrides.colors)) { return _.extend(_.clone(rconf.colors||{}), overrides.colors); }\n      else { return _.clone(overrides.colors); }\n    })(),\n\n    logLevels: (function (){\n      if (_.isUndefined(overrides.logLevels)) { return _.clone(rconf.logLevels); }\n      else if (_.isObject(overrides.logLevels)) { return _.extend(_.clone(rconf.logLevels||{}), overrides.logLevels); }\n      else { return _.clone(overrides.logLevels); }\n    })()\n\n  });\n  // Strip top-level undefined properties.\n  _.each(_.keys(options), function (key) {\n    if (_.isUndefined(options[key])) { delete options[key]; }\n  });\n  // console.log('\\n* * * options (after merge):',options);\n\n\n  // If `prefixes` were not explicitly set in user config,\n  // and `colors` were not disabled in user config,\n  // and NODE_ENV is not set to 'production,\n  // load the `colors` dependency and colorize prefixes.\n  if (options.prefixes === undefined && options.colors && process.env.NODE_ENV !== 'production') {\n\n    options.prefixes = {};\n\n    // Use prefixTheme if specified\n    var prefixTheme = (options.prefixTheme || DEFAULT.OPTIONS.prefixTheme);\n    // console.log('PREFIX THEME:',prefixTheme);\n    // console.log('DEFAULT.OPTIONS.prefixThemes:',DEFAULT.OPTIONS.prefixThemes);\n    // console.log('options.prefixThemes:',options.prefixThemes);\n    var prefixes = options.prefixes;\n    if (prefixTheme) {\n      prefixes = (options.prefixThemes || DEFAULT.OPTIONS.prefixThemes)[prefixTheme];\n      if (!prefixes) {\n        throw new Error('Consistency violation: prefixTheme option (`'+prefixTheme+'`) does not match any of the available themes.');\n      }\n    }\n    // console.log('---------------\\nprefixes:',prefixes);\n    DEFAULT.METHODS.forEach(function(logAt) {\n\n      var prefix = prefixes[logAt];\n\n      // If a `prefix` was specified, use it instead\n      // (keep in mind this is only if the user didn't define `prefixes`)\n      var configuredPrefix = (options.prefix || DEFAULT.OPTIONS.prefix);\n\n      // If `prefix` is explicitly set to `false` or `null`,\n      // disable prefixes altogether.\n      if (options.prefix === false || options.prefix === null) {\n        configuredPrefix = '';\n      }\n\n      // Default prefix for each log level to whatever's in the `prefixes`\n      // conf, as long as no explicit global prefix was defined.\n      configuredPrefix = configuredPrefix || prefixes[logAt];\n\n      // Add some color to this prefix:\n\n      // Use the appropriate color for the log level.\n      var colorMappings = _.isObject(options.colors) ? options.colors : {};\n      var colorName = colorMappings[logAt];\n\n      // Get the ANSI-colorized prefix.\n      var colorizedPrefix = (function _getColorizedPrefix() {\n\n        // If this is \"rainbow\", handle it as a special case.\n        // (based on https://github.com/Marak/colors.js/blob/dfb15b55382772ba4fd34fc21922a2d83e9d34d3/lib/maps/rainbow.js)\n        if (colorName === 'rainbow') {\n          //RoY G BiV\n          var RAINBOW_COLORS = ['red', 'yellow', 'green', 'blue', 'magenta'];\n          var exploded = configuredPrefix.split('');\n          var inRainbows = exploded.map(function (letter, i){\n            if (letter === ' ') { return letter; }\n            else {\n              var chalkOfThisColor = chalk[RAINBOW_COLORS[i++ % RAINBOW_COLORS.length]];\n              if (!chalkOfThisColor) { throw new Error('Consistency violation: Rainbow contains unrecognized color.'); }\n              return chalkOfThisColor(letter);\n            }\n          });\n          return inRainbows.join('');\n        }//</if \"rainbow\">\n\n        // --•\n        // Otherwise, this is some misc. color.\n        // So attempt to get the appropriate chalk function.\n        // If one exists, use it to transform the prefix.\n        var chalkOfThisColor = chalk[colorName];\n        if (chalkOfThisColor) {\n          return chalkOfThisColor(configuredPrefix);\n        }\n\n        // --•\n        // But otherwise, if no such color can be found,\n        // then just use the uncolored prefix.\n        return configuredPrefix;\n\n      })();//</self-calling function :: _getColorizedPrefix()>\n\n      // Set the now-potentially-customized prefix string\n      // for this particular log level.\n      options.prefixes[logAt] = colorizedPrefix;\n\n    });\n  }//</if colored prefixes are enabled>\n\n  // Then mix in the rest of the implicit default.\n  // (DEFAULT.OPTIONS above)\n  // console.log('options:',options);\n  // console.log('DEFAULT.OPTIONS:',DEFAULT.OPTIONS);\n  var finalOptions = _.extend({}, DEFAULT.OPTIONS, options, {\n\n    prefixThemes: (function(){\n      if (_.isUndefined(options.prefixThemes)) { return _.cloneDeep(DEFAULT.OPTIONS.prefixThemes); }\n      else if (_.isObject(options.prefixThemes)) {\n        return _.merge(_.cloneDeep(DEFAULT.OPTIONS.prefixThemes), _.cloneDeep(options.prefixThemes));\n      }\n      else { return _.cloneDeep(options.prefixThemes); }\n    })(),\n\n    colors: (function (){\n      if (_.isUndefined(options.colors)) { return _.clone(DEFAULT.OPTIONS.colors); }\n      else if (_.isObject(options.colors)) { return _.extend({}, DEFAULT.OPTIONS.colors||{}, options.colors); }\n      else { return _.clone(options.colors); }\n    })(),\n\n    logLevels: (function (){\n      if (_.isUndefined(options.logLevels)) { return _.clone(DEFAULT.OPTIONS.logLevels); }\n      else if (_.isObject(options.logLevels)) { return _.extend({}, DEFAULT.OPTIONS.logLevels||{}, options.logLevels); }\n      else { return _.clone(options.logLevels); }\n    })()\n\n  });\n  // Strip top-level undefined properties.\n  _.each(_.keys(finalOptions), function (key) {\n    if (_.isUndefined(finalOptions[key])) { delete finalOptions[key]; }\n  });\n  // console.log('final options (after merge):',finalOptions);\n\n\n  return finalOptions;\n};\n","/home/travis/build/npmtest/node-npmtest-captains-log/node_modules/captains-log/lib/captains.js":"/**\n * Return a default logger which writes to stdout and stderr.\n *\n * @return {Function} [enhanced log fn]\n * @api private\n */\nmodule.exports = function LowLevelLogger() {\n\n  var _stdout = console.log.bind(console);\n  var _stderr = console.error.bind(console);\n\n  // Emulate winston's output stream conventions\n  // (so that existing tests will pass)\n  return {\n    crit: _stderr,\n    error: _stderr,\n    warn: _stdout,\n    debug: _stderr,\n    info: _stdout,\n    verbose: _stdout,\n    silly: _stdout,\n    blank: _stdout\n  };\n\n};\n"}